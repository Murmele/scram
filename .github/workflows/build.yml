---
name: Scram
on:
  push:
  pull_request:
  page_build:
  workflow_dispatch:

env:
# choose boost version carefully, because it might be that the version is not supported
# by the windows version (https://stackoverflow.com/questions/12484894/what-do-i-do-about-batch-recursion-exceeds-stack-limits-when-running-boost-bui)
  BOOST_VERSION: 1.78.0
  BOOST_PATH: ${{github.workspace}}/boost/boost
  WIN_PLATFORM_VERSION: 2017

jobs:
  build:
    runs-on: ${{ matrix.env.os }}
    strategy:
      fail-fast: false
      matrix:
        env:
          # - name: linux
          #   os: ubuntu-latest
          #   ninja_platform: linux
          #   qt_platform: linux
          #   openssl_arch: linux-x86_64
          #   cmake_env: {}

          #- name: mac
            #os: macos-latest
            #ninja_platform: mac
            #qt_platform: mac
            #openssl_arch: darwin64-x86_64-cc
            #cmake_env: {}
            #pack: 1

          - name: win64
            os: windows-latest
            ninja_platform: win
            qt_platform: windows
            qt_arch: win64_msvc2017_64 # Windows w/ Qt >= 5.9 && Qt < 5.15: win64_msvc2017_64
            openssl_arch: VC-WIN64A
            msvc_arch: x64
            cmake_env:
              CC: cl
              CXX: cl
            pack: 1

    steps:
      - name: Configure development build
        if: github.ref_type != 'tag'
        uses: allenevans/set-env@c4f231179ef63887be707202a295d9cb1c687eb9
        with:
          CMAKE_FLAGS: "-DDEV_BUILD=${{ github.ref_name }}"

      - name: DEBUG Environment variables
        run: |
          $env:PKG_CONFIG_PATH

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Initialize Submodules
        uses: snickerbockers/submodules-init@v4

      # - name: Install Perl
      #   if: matrix.env.ninja_platform == 'win'
      #   uses: shogo82148/actions-setup-perl@v1
      #   with:
      #     perl-version: '5.30'

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.9.0
          platform: ${{ matrix.env.ninja_platform }}
          destination: ninja

      - name: Setup MSVC environment
        if: matrix.env.ninja_platform == 'win'
        uses: seanmiddleditch/gha-setup-vsdevenv@v3
        with:
          arch: ${{ matrix.env.msvc_arch }}

      - name: Cache Boost
        uses: actions/cache@v2
        with:
          path: '${{ runner.workspace }}/boost_*.tar.gz'
          key: 'boost-${{env.BOOST_VERSION}}'

      - name: Build Boost
        # This won't re-download the archive unnecessarily:
        uses: egor-tensin/build-boost@v1
        with:
          version: ${{env.BOOST_VERSION}}
          libraries: program_options filesystem system random
          toolset: vs2017

      - name: Show paths
        run: |
          printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
          printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
        shell: bash

      - name: Install libxml2
        if: matrix.env.ninja_platform == 'win'
        run: |
          git clone https://github.com/GNOME/libxml2.git
          cd libxml2
          mkdir -p build
          cd build
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D LIBXML2_WITH_PYTHON=OFF -D LIBXML2_WITH_ICONV=OFF -D LIBXML2_WITH_LZMA=OFF -D LIBXML2_WITH_ZLIB=OFF ..
          ninja install

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        timeout-minutes: 10
        with:
          version: 5.9.5
          target: desktop
          host: ${{ matrix.env.qt_platform }}
          arch: ${{ matrix.env.qt_arch }}
          install-deps: true
          #modules: qtwebengine

      # - name: Install NASM
      #   if: matrix.env.ninja_platform == 'win'
      #   uses: ilammy/setup-nasm@v1.2.0

      # - name: Build OpenSSL (linux)
      #   if: matrix.env.ninja_platform == 'linux'
      #   run: |
      #     cd dep/openssl/openssl
      #     ./config -fPIC
      #     make

      # - name: Build OpenSSL (mac)
      #   if: matrix.env.ninja_platform == 'mac'
      #   run: |
      #     cd dep/openssl/openssl
      #     ./Configure ${{ matrix.env.openssl_arch }} no-shared
      #     make

      # - name: Build OpenSSL (win)
      #   if: matrix.env.ninja_platform == 'win'
      #   run: |
      #     cd dep/openssl/openssl
      #     perl Configure ${{ matrix.env.openssl_arch }}
      #     nmake

      # - name: Build Jemalloc
      #   if: matrix.env.ninja_platform == 'win'
      #   run: |
      #     git clone https://github.com/jemalloc/jemalloc.git
      #     cd jemalloc
      #     ./configure
      #     make
      #     make install

      - name: Configure Release
        env: ${{ matrix.env.cmake_env }}
        # only windows!!!
        run: |
          $Env:PKG_CONFIG_PATH += ";C:/Program Files (x86)/libxml2/lib/pkgconfig"
          mkdir -p build/release
          cd build/release
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_GUI=ON -DWITH_TCMALLOC=OFF -DWITH_JEMALLOC=OFF -DWITH_COVERAGE=OFF -DWITH_PROFILE=OFF ${{ env.CMAKE_FLAGS }} ../..

      - name: Build Information
        run: |
          echo "ninja version: $(ninja --version)"
          git --version
          qmake --version
          cmake --version

      - name: Build
        run: |
          cd build/release
          ninja package

      - name: Publish build artifacts
        if: matrix.env.pack
        uses: actions/upload-artifact@v2
        with:
          path: build/release/pack/Scram*
          name: Scram ${{ matrix.env.name }}

      # - name: Test
      #   # TODO: Re-Enable this when https://github.com/actions/runner/issues/1206 gets resolved
      #   if: matrix.env.ninja_platform != 'win'
      #   continue-on-error: true
      #   run: |
      #     cd build/release
      #     ninja check

  prerelease:
    # https://github.com/marvinpinto/actions/issues/177
    needs: [build] # flatpak
    runs-on: ubuntu-latest # does not matter which
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Update GitHub prerelease
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Latest Build"
          files: |
            **/artifacts/Scram win64/Scram*.exe
            **/artifacts/Scram win32/Scram*.exe
...
